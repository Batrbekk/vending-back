import 'dotenv/config';
import mongoose from 'mongoose';
import { PasswordService } from '../lib/auth/password';
import { User, Location, VendingMachine, Device, Sale, RefillLog, Alert, UserDocument, LocationDocument, VendingMachineDocument } from '../entities';
import { UserRole, PaymentMethod, AlertType } from '../types';

async function connectDB() {
  const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/vending-machines';
  
  console.log('üîç MONGODB_URI:', MONGODB_URI ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
  console.log('üîç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', process.env.MONGODB_URI ? '–¥–∞' : '–Ω–µ—Ç');
  
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ MongoDB');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
}

async function clearDatabase() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  if (!mongoose.connection.db) throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
  
  await Promise.all([
    User.deleteMany({}),
    Location.deleteMany({}),
    VendingMachine.deleteMany({}),
    Device.deleteMany({}),
    Sale.deleteMany({}),
    RefillLog.deleteMany({}),
    Alert.deleteMany({}),
    // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
    mongoose.connection.db.collection('active_refill_sessions').deleteMany({})
  ]);

  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');
}

async function seedUsers() {
  console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

  const adminPassword = await PasswordService.hashPassword('Aa12345!');
  const manager1Password = await PasswordService.hashPassword('manager123');
  const manager2Password = await PasswordService.hashPassword('manager456');

  const users = [
    {
      email: 'admin@gigross.kz',
      passwordHash: adminPassword,
      name: 'Kuandyk Batyrbek',
      role: UserRole.ADMIN,
      phone: '+77001234567',
      isActive: true
    }
  ];

  const createdUsers = await User.insertMany(users);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${createdUsers.length}`);
  
  return createdUsers;
}

async function seedLocations() {
  console.log('üìç –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π...');

  const locations = [
    {
      name: '–¢–†–¶ Dostyk Plaza',
      address: '—É–ª. –î–æ—Å—Ç—ã–∫, 111, –ê–ª–º–∞—Ç—ã',
      geo: { lat: 43.2567, lng: 76.9286 },
      timezone: 'Asia/Almaty'
    },
    {
      name: '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ö–∞–∑–ù–£',
      address: '–ø—Ä. –∞–ª—å-–§–∞—Ä–∞–±–∏, 71, –ê–ª–º–∞—Ç—ã', 
      geo: { lat: 43.2370, lng: 76.9422 },
      timezone: 'Asia/Almaty'
    },
    {
      name: '–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ –ê–ª–º–∞–ª—ã',
      address: '—É–ª. –¢–æ–ª–µ –±–∏, –ê–ª–º–∞—Ç—ã',
      geo: { lat: 43.2508, lng: 76.9125 },
      timezone: 'Asia/Almaty'
    },
    {
      name: '–ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä –ù—É—Ä–ª—ã –¢–∞—É',
      address: '–ø—Ä. –ù–∞–∑–∞—Ä–±–∞–µ–≤–∞, 223, –ê–ª–º–∞—Ç—ã',
      geo: { lat: 43.2384, lng: 76.9049 },
      timezone: 'Asia/Almaty'
    },
    {
      name: '–ü–∞—Ä–∫ –ö–æ–∫-–¢–æ–±–µ',
      address: '–ö–æ–∫-–¢–æ–±–µ, –ê–ª–º–∞—Ç—ã',
      geo: { lat: 43.2465, lng: 76.9069 },
      timezone: 'Asia/Almaty'
    }
  ];

  const createdLocations = await Location.insertMany(locations);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –ª–æ–∫–∞—Ü–∏–π: ${createdLocations.length}`);
  
  return createdLocations;
}

async function seedMachines(locations: LocationDocument[], users: UserDocument[]) {
  console.log('ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–æ–≤...');

  const managers = users.filter(u => u.role === UserRole.MANAGER);
  
  const machines = [
    // Dostyk Plaza
    { machineId: 'VM-001', locationId: locations[0]._id, stock: 45, capacity: 360, assignedManagerId: managers[0]._id },
    { machineId: 'VM-002', locationId: locations[0]._id, stock: 200, capacity: 360, assignedManagerId: managers[0]._id },
    
    // –ö–∞–∑–ù–£
    { machineId: 'VM-003', locationId: locations[1]._id, stock: 0, capacity: 360, assignedManagerId: managers[1]._id },
    { machineId: 'VM-004', locationId: locations[1]._id, stock: 120, capacity: 360, assignedManagerId: managers[1]._id },
    
    // –ê–ª–º–∞–ª—ã
    { machineId: 'VM-005', locationId: locations[2]._id, stock: 300, capacity: 360 },
    
    // –ù—É—Ä–ª—ã –¢–∞—É
    { machineId: 'VM-006', locationId: locations[3]._id, stock: 180, capacity: 360, assignedManagerId: managers[0]._id },
    { machineId: 'VM-007', locationId: locations[3]._id, stock: 90, capacity: 360, assignedManagerId: managers[1]._id },
    
    // –ö–æ–∫-–¢–æ–±–µ  
    { machineId: 'VM-008', locationId: locations[4]._id, stock: 250, capacity: 360 }
  ];

  const createdMachines = [];
  
  for (const machineData of machines) {
    const machine = new VendingMachine(machineData);
    machine.updateStatus(); // –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    await machine.save();
    createdMachines.push(machine);
  }

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–æ–≤: ${createdMachines.length}`);
  return createdMachines;
}

async function seedDevices(machines: VendingMachineDocument[]) {
  console.log('üì± –°–æ–∑–¥–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');

  const devices = machines.map(machine => ({
    machineId: machine._id,
    firmwareVersion: `1.${Math.floor(Math.random() * 5)}.${Math.floor(Math.random() * 10)}`,
    lastHeartbeatAt: new Date(Date.now() - Math.random() * 3600000) // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
  }));

  const createdDevices = await Device.insertMany(devices);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${createdDevices.length}`);
  
  return createdDevices;
}

async function seedSales(machines: VendingMachineDocument[]) {
  console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂...');

  const drinks = [
    { sku: 'COCA_COLA_0.5', price: 250 },
    { sku: 'SPRITE_0.5', price: 250 },
    { sku: 'FANTA_0.5', price: 250 },
    { sku: 'WATER_0.5', price: 150 },
    { sku: 'JUICE_0.3', price: 300 },
    { sku: 'ENERGY_0.25', price: 400 }
  ];

  const paymentMethods = [PaymentMethod.CARD, PaymentMethod.CASH, PaymentMethod.ONLINE];
  const sales = [];

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
  for (let i = 0; i < 500; i++) {
    const machine = machines[Math.floor(Math.random() * machines.length)];
    const drink = drinks[Math.floor(Math.random() * drinks.length)];
    const paymentMethod = paymentMethods[Math.floor(Math.random() * paymentMethods.length)];
    const qty = Math.random() < 0.8 ? 1 : 2; // 80% –ø–æ–∫—É–ø–æ–∫ - 1 —Ç–æ–≤–∞—Ä
    
    // –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    const daysAgo = Math.floor(Math.random() * 30);
    const hoursAgo = Math.floor(Math.random() * 24);
    const paidAt = new Date();
    paidAt.setDate(paidAt.getDate() - daysAgo);
    paidAt.setHours(hoursAgo);

    sales.push({
      machineId: machine._id,
      sku: drink.sku,
      price: drink.price,
      qty,
      total: drink.price * qty,
      paidAt,
      paymentMethod,
      receiptId: `RCP-${Date.now()}-${i}`
    });
  }

  const createdSales = await Sale.insertMany(sales);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–¥–∞–∂: ${createdSales.length}`);
  
  return createdSales;
}

async function seedRefillLogs(machines: VendingMachineDocument[], users: UserDocument[]) {
  console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π...');

  const managers = users.filter(u => u.role === UserRole.MANAGER);
  const refills = [];

  // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
  for (let i = 0; i < 50; i++) {
    const machine = machines[Math.floor(Math.random() * machines.length)];
    const manager = managers[Math.floor(Math.random() * managers.length)];
    
    const daysAgo = Math.floor(Math.random() * 30);
    const startedAt = new Date();
    startedAt.setDate(startedAt.getDate() - daysAgo);
    startedAt.setHours(Math.floor(Math.random() * 24));
    
    const finishedAt = new Date(startedAt);
    finishedAt.setMinutes(startedAt.getMinutes() + 15 + Math.floor(Math.random() * 45)); // 15-60 –º–∏–Ω—É—Ç

    const before = Math.floor(Math.random() * 150); // –û—Å—Ç–∞—Ç–æ–∫ –¥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    const added = 200 + Math.floor(Math.random() * 160); // –î–æ–±–∞–≤–ª–µ–Ω–æ 200-360
    const after = Math.min(before + added, machine.capacity);

    refills.push({
      machineId: machine._id,
      managerId: manager._id,
      startedAt,
      finishedAt,
      before,
      added,
      after,
      comment: Math.random() < 0.3 ? '–ü–ª–∞–Ω–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' : undefined
    });
  }

  const createdRefills = await RefillLog.insertMany(refills);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –ª–æ–≥–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: ${createdRefills.length}`);
  
  return createdRefills;
}

async function seedAlerts(machines: VendingMachineDocument[]) {
  console.log('üö® –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤...');

  const alerts = [];

  // –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
  for (const machine of machines) {
    if (machine.stock < 150) {
      const alertType = machine.stock === 0 ? AlertType.OUT_OF_STOCK : AlertType.LOW_STOCK;
      
      alerts.push({
        machineId: machine._id,
        type: alertType,
        message: machine.stock === 0 
          ? '–¢–æ–≤–∞—Ä—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å'
          : `–û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π: ${machine.stock} —à—Ç.`,
        createdAt: new Date(Date.now() - Math.random() * 86400000), // –í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
        resolvedAt: Math.random() < 0.3 ? new Date() : undefined // 30% –∞–ª–µ—Ä—Ç–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
      });
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–ª–µ—Ä—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–∞—Ö
  for (let i = 0; i < 5; i++) {
    const machine = machines[Math.floor(Math.random() * machines.length)];
    
    alerts.push({
      machineId: machine._id,
      type: AlertType.ERROR,
      message: '–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è',
      createdAt: new Date(Date.now() - Math.random() * 604800000), // –í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
      resolvedAt: Math.random() < 0.7 ? new Date() : undefined // 70% —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
    });
  }

  if (alerts.length > 0) {
    const createdAlerts = await Alert.insertMany(alerts);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: ${createdAlerts.length}`);
    return createdAlerts;
  }

  console.log('‚úÖ –ê–ª–µ—Ä—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è');
  return [];
}

async function seed() {
  try {
    console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...\n');
    console.log(process.env.MONGODB_URI)

    await connectDB();
    await clearDatabase();

    const users = await seedUsers();
    const locations = await seedLocations();
    const machines = await seedMachines(locations, users);
    const devices = await seedDevices(machines);
    const sales = await seedSales(machines);
    const refills = await seedRefillLogs(machines, users);
    const alerts = await seedAlerts(machines);

    console.log('\nüéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.length}`);
    console.log(`   üìç –õ–æ–∫–∞—Ü–∏–∏: ${locations.length}`);
    console.log(`   ü§ñ –ê–≤—Ç–æ–º–∞—Ç—ã: ${machines.length}`);
    console.log(`   üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${devices.length}`);
    console.log(`   üí∞ –ü—Ä–æ–¥–∞–∂–∏: ${sales.length}`);
    console.log(`   üîÑ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${refills.length}`);
    console.log(`   üö® –ê–ª–µ—Ä—Ç—ã: ${alerts.length}`);

    console.log('\nüîë –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:');
    console.log('   –ê–¥–º–∏–Ω: admin@vendingapp.kz / admin123');
    console.log('   –ú–µ–Ω–µ–¥–∂–µ—Ä 1: manager1@vendingapp.kz / manager123');  
    console.log('   –ú–µ–Ω–µ–¥–∂–µ—Ä 2: manager2@vendingapp.kz / manager456');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  } finally {
    await mongoose.connection.close();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  seed();
}

export default seed;
