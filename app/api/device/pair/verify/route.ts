import { NextRequest } from 'next/server';
import dbConnect from '@/lib/database/connection';
import { createErrorResponse, createSuccessResponse } from '@/lib/auth/middleware';
import { PairingCode, VendingMachine, Device } from '@/entities';
import type { PairingCodeDocument } from '@/entities/PairingCode';
import type { DeviceDocument } from '@/entities/Device';
import { PairingStatus } from '@/entities/PairingCode';
import mongoose from 'mongoose';
import { MachineStatus } from '@/types';

export async function POST(request: NextRequest) {
  try {
    await dbConnect();
    console.log('üîÑ Pairing request received');

    type VerifyBody = { code?: string; firmwareVersion?: string };
    const body = (await request.json().catch(() => ({}))) as VerifyBody;
    const code: string = (body.code || '').trim();
    
    console.log('üîÑ Pairing code:', code);
    console.log('üîÑ Firmware version:', body.firmwareVersion);

    if (!code || !/^[0-9]{6}$/.test(code)) {
      console.log('‚ùå Invalid code format:', code);
      return createErrorResponse('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥', 400);
    }

    console.log('üîç Verifying pairing code...');
    const pairing: PairingCodeDocument | null = await PairingCode.verifyCode(code);
    if (!pairing) {
      console.log('‚ùå Pairing code not found or expired:', code);
      return createErrorResponse('–ö–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫', 400);
    }
    
    console.log('‚úÖ Pairing code found:', {
      id: pairing._id,
      machineId: pairing.machineId,
      status: pairing.status,
      expiresAt: pairing.expiresAt
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—à–∏–Ω—É
    console.log('üîç Finding machine:', pairing.machineId);
    const machine = await VendingMachine.findById(pairing.machineId);
    if (!machine) {
      console.log('‚ùå Machine not found:', pairing.machineId);
      return createErrorResponse('–ê–≤—Ç–æ–º–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 404);
    }
    
    console.log('‚úÖ Machine found:', {
      id: machine._id,
      machineId: machine.machineId,
      status: machine.status
    });

    // –°–æ–∑–¥–∞—ë–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç; –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–∏–º apiKey
    console.log('üîç Finding or creating device...');
    let device: DeviceDocument | null = await Device.findOne({ machineId: pairing.machineId });
    if (!device) {
      console.log('üîß Creating new device for machine:', pairing.machineId);
      device = await Device.createForMachine(pairing.machineId as mongoose.Types.ObjectId, body.firmwareVersion);
    } else {
      console.log('üîß Updating existing device:', device._id);
      if (body.firmwareVersion) await device.updateFirmware(body.firmwareVersion);
      await device.regenerateApiKey();
    }
    
    console.log('‚úÖ Device ready:', {
      id: device._id,
      machineId: device.machineId,
      apiKey: device.apiKey?.substring(0, 8) + '...'
    });

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∞–≤—Ç–æ–º–∞—Ç –≤ WORKING, –µ—Å–ª–∏ –æ–Ω –±—ã–ª UNPAIRED
    if (machine.status === MachineStatus.UNPAIRED) {
      console.log('üîß Updating machine status from UNPAIRED to WORKING');
      machine.status = MachineStatus.WORKING;
      await machine.save();
    }

    // –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º
    console.log('üîß Marking pairing code as used');
    pairing.status = PairingStatus.USED;
    pairing.usedAt = new Date();
    pairing.usedByDeviceId = device._id as mongoose.Types.ObjectId;
    await pairing.save();

    console.log('‚úÖ Pairing completed successfully');
    return createSuccessResponse({
      machine: { _id: String(machine._id), machineId: machine.machineId },
      device: { _id: String(device._id), apiKey: device.apiKey },
    }, 200);
  } catch (e) {
    console.error('‚ùå Pairing error:', e);
    console.error('‚ùå Error stack:', (e as Error).stack);
    return createErrorResponse('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–µ–π—Ä–∏–Ω–≥–∞', 500);
  }
}
